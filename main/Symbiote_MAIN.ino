#include <Audio.h>
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <SerialFlash.h>

AudioPlaySdWav           playSdWav1;
AudioOutputI2S           i2s1;
AudioConnection          patchCord1(playSdWav1, 0, i2s1, 0);
AudioConnection          patchCord2(playSdWav1, 1, i2s1, 1);
AudioControlSGTL5000     sgtl5000_1;

int Proxi = A0; // select the input pin for the first sensor
int Micro = A1; // select the input pin for the second sensor
int proxiValue = 0 ; //variable to store the value coming from the proximeter
int microValue = 0 ; //variable to store the value coming from the microphone
int a = 0;
String humeur[4]  = {"Peureux", "Serein", "Agressif", "Euphorique"} ;
// [] = pour les tableaux, une adresse. {} les actions, ce qui est exécuté. () pour rentrer des arguments ou des conditions d'execution de la fonction.
int selecthumeur = 0;

void setup() {
  Serial.begin(9600);
  AudioMemory(8);
  sgtl5000_1.enable();
  sgtl5000_1.volume(0.5);
  SPI.setMOSI(7); // Serial Peripheral Interface (SPI) is a synchronous serial data protocol used by microcontrollers
  //for communicating with one or more peripheral devices quickly over short distances.
  //It can also be used for communication between two microcontrollers.

  SPI.setSCK(14); // Synchro d'horloge entre teensy et audio shield.
  //MISO (Master In Slave Out) - The Slave line for sending data to the master,
  //MOSI (Master Out Slave In) - The Master line for sending data to the peripherals,
  //SCK (Serial Clock) - The clock pulses which synchronize data transmission generated by the master.

  if (!(SD.begin(10))) {
    while (1) {
      Serial.println("Unable to access the SD card");
      delay(500);

    }
  }
  delay(1000);
}

int
// Détermine quel dossier est à scanner selon l'humeur détecté par les capteurs (voir tableau référence). Valeur de capteur à filtrer.
void loop() {
  if (analogRead Proxi < 512) {                    //si qu'une seule action, on écrit sans les crochets.
    selecthumeur = 0;
  }

  if (analogRead Proxi > 512) {
    selecthumeur = 1;
  }

  if (analogRead Micro < 512) {
    selecthumeur = 2;
  }

  if (analogRead Micro > 512) {
    selecthumeur = 3;
  }
}

if ( humeur[0] = false) {

  else
  }
if ( humeur[0] = false) {
  else
  }

//   fonction de selection d'un sample qui n'as pas encore joué
//int scanCorpus() {

  ///faire une fonction qui scanne le nombre de sample dans un corpus, l'appeler comme argument de la fonction selectUnplayedSample
}


int index = 0; // nombre de samples deja jouées;
int sampleDejaJouees[100] = {0}; //Défini la taille du tableau et initialise toutes les valeurs à 0
int i = 0;

int selectUnplayedSample(int totalSampleNumberInThisCorpus) {

  boolean verif = false;

  while (verif == false) {
    verif = true;
    int unplayedSample = int(random(totalSampleNumberInThisCorpus));

    for (int i = 0; i < index; i++) {

      if (sampleDejaJouees[i] == unplayedSample) {
        verif = false;
      }
    }
  }
  // si il reste des questions à poser
  if (index < totalSampleNumberInThisCorpus) {
    sampleDejaJouees[index] = unplayedSample;
    index++;
  }
  else {
    index = 0;
  }

  return unplayedSample;
}

//JOUE LE SAMPLE APPELE

void playFile(const char *filename)
{
  Serial.print("Playing file: ");
  Serial.println(filename);

  // Start playing the file.  This sketch continues to
  // run while the file plays.
  playWav1.play(filename);

  // A brief delay for the library read WAV info
  delay(5);

  // Simply wait for the file to finish playing.
  while (playWav1.isPlaying()) {
    // uncomment these lines if you audio shield
    // has the optional volume pot soldered
    //float vol = analogRead(15);
    //vol = vol / 1024;
    // sgtl5000_1.volume(vol);
  }
}

Serial.println("Start playing");
playSdWav1.play("SDTEST1.WAV");
delay(10); // wait for library to parse WAV info

void seuil(int proxiValue, int microValue) {

  if (humeur == [0, 1] && playSdWav1.isPlaying() == false) {   // pour verifier si un boolean est vrai on peut mettre : if(b==true) ou if(b)

    Serial.println("Start playing");
    playSdWav1.play("SDTEST2.WAV");
    delay(10); // wait for library to parse WAV info    // pour verifier si un boolean est faux on peut mettre : if(b==false) ou if(!b)
  }

  if (a > palier[1] && a < palier[2] && b && playSdWav1.isPlaying() == false) {
    Serial.println("Start playing");
    playSdWav1.play("SDTEST3.WAV");
    delay(10); // wait for library to parse WAV info
  }


  if ( < palier[2] && b && playSdWav1.isPlaying() == false) {
    Serial.println("Start playing");
    playSdWav1.play("SDTEST4.WAV");
    delay(10); // wait for library to parse WAV info
  }

  if (a < palier[3] && b && playSdWav1.isPlaying() == false) {
    Serial.println("Start playing");
    playSdWav1.play("SDTEST3.WAV");
    delay(10); // wait for library to parse WAV info
  }
}
